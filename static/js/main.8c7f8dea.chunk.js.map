{"version":3,"sources":["components/MainContent/ManageContexts/ManageContexts.module.css","components/MainContent/Blocks/EditingBar/EditingBar.module.css","components/Menu/Menu.module.css","components/TopBar/TopBar.module.css","components/MainContent/MainContent.module.css","reducers/modeReducer.ts","reducers/contextsReducer.ts","reducers/blocksReducer.ts","reducers/subBlocksReducer.ts","store.ts","iconColors.ts","constants.ts","components/Menu/Menu.tsx","components/TopBar/TopBar.tsx","components/MainContent/DeletionModal.tsx","components/MainContent/Blocks/EditingBar/EditingBar.tsx","utils.ts","components/MainContent/Blocks/SubBlock.tsx","components/MainContent/Blocks/Block.tsx","components/MainContent/Blocks/Blocks.tsx","components/MainContent/About/About.tsx","components/MainContent/AlertModal.tsx","components/MainContent/ManageContexts/ContextItem.tsx","components/MainContent/ManageContexts/ManageContexts.tsx","components/MainContent/ImportExport/ImportExport.tsx","components/MainContent/MainContent.tsx","App.tsx","index.tsx"],"names":["module","exports","updateMode","settings","type","data","initialState","showEditIcons","currentContext","currentTheme","reducer","state","action","setContexts","contexts","updateContext","context","id","name","blockCount","subBlockCount","map","filter","setBlocks","blocks","addBlock","block","updateBlock","deleteBlock","setSubBlocks","subBlocks","addSubBlock","subBlock","updateSubBlock","deleteSubBlock","contents","isStriked","combineReducers","mode","modeReducer","contextsReducer","blocksReducer","subBlocksReducer","store","createStore","composeWithDevTools","useCustomSelector","createSelectorHook","iconColors","blue","gray","BASEPATH","Menu","showMenu","setShowMenu","isDropdown","usingDropdown","useState","timeOutId","setTimeOutId","menu","useRef","dispatch","useDispatch","location","useLocation","useEffect","closeMenu","event","current","contains","target","document","addEventListener","removeEventListener","toggleTheme","Number","toggleEditIcons","handleContextChange","darkMode","containerThemeColor","style","iconThemeColor","mainMenuItems","path","menuIcon","icon","faCaretRight","color","currentContextIcon","className","faCircle","size","container","ref","onBlur","setTimeout","onFocus","clearTimeout","inner","title","onClick","faSun","faMoon","faCheckSquare","faSquare","c","i","pathname","undefined","to","item","TopBar","bars","prevState","faBars","test","DeletionModal","modalIsOpen","setModalIsOpen","handleDelete","topMessage","mainMessage","isOpen","overlayClassName","ariaHideApp","paddingBottom","EditingBar","isEditing","setIsEditing","handleEdit","handleSubmit","handleAddSubBlock","handleDeleteSubBlock","isLast","find","faCheck","faTimes","faEdit","faPlus","faTrash","swapItems","scopedItems","allItems","index","newScopedArr","newAllArr","updatedItem","newPlaceId","oldItem","validateAndSetState","imported","Error","newMode","newContexts","newBlocks","newSubBlocks","newContextCounts","newBlockCounts","forEach","missingCProperty","b","missingBProperty","hasOwnProperty","count","sb","missingSBProperty","contextId","SubBlock","subNameValue","setSubNameValue","contentsValue","setContentsValue","parsedContents","setParsedContents","subNameInput","currentBlockSubBlocks","findIndex","useLayoutEffect","focus","parseUrlFromContents","useCallback","urlMarkdownRegex","content","split","contentArr","titleArr","addingToTitle","length","startsWith","endsWith","push","join","toReplace","strArr","url","modifyingTitle","el","replace","handleReorder","dir","value","onChange","placeholder","faChevronUp","disabled","faChevronDown","dangerouslySetInnerHTML","__html","uuidv4","Block","nameValue","setNameValue","nameInput","currentContextBlocks","newBlockId","sub","Blocks","About","href","rel","AlertModal","message","ContextItem","handleOpenDeletionModal","contextErrorType","setContextErrorType","contextNameValue","setContextNameValue","contextNameInput","newArr","swapContexts","row","maxLength","error","ManageContexts","focusedContext","setFocusedContext","newCurrentContext","handleDeleteContext","newContextId","ImportExport","textareaValue","setTextareaValue","saveButtonDisabled","setSaveButtonDisabled","errorMessage","setErrorMessage","updateMessage","setUpdateMessage","saveButton","importElement","getElementById","JSON","stringify","handleFiles","reader","FileReader","readAsText","files","onload","result","click","currentDate","Date","day","getDate","month","getMonth","year","getFullYear","dateString","blob","Blob","saveAs","parse","SyntaxError","accept","display","aria-hidden","MainContent","separator","exact","App","setUsingDropdown","window","innerWidth","windowWidth","setWindowWidth","body","backgroundColor","modeData","localStorage","getItem","contextsData","blocksData","subBlocksData","newState","console","log","setItem","handleResize","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8c7f8dea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ManageContexts_container__36BTI\",\"container-dark\":\"ManageContexts_container-dark__2jt78\",\"row\":\"ManageContexts_row__3hYo4\",\"row-dark\":\"ManageContexts_row-dark__eVAwz\",\"context-name\":\"ManageContexts_context-name__2mKG-\",\"new-context\":\"ManageContexts_new-context__jNq-h\",\"button-group\":\"ManageContexts_button-group__10KFd\",\"edit-mode\":\"ManageContexts_edit-mode__3oSIL\",\"edit-mode-dark\":\"ManageContexts_edit-mode-dark__3Ko5r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EditingBar_container__2WDq6\",\"container-small\":\"EditingBar_container-small__I73QS\",\"container-dark\":\"EditingBar_container-dark__1EUBi\",\"inner-container\":\"EditingBar_inner-container__17poU\",\"icon-item\":\"EditingBar_icon-item__3hJvz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Menu_container__Rs1kq\",\"container-dark\":\"Menu_container-dark__3nNee\",\"inner\":\"Menu_inner__1lODf\",\"slide-out\":\"Menu_slide-out__33zV3\",\"current-context-icon\":\"Menu_current-context-icon__en9ZG\",\"menu-link\":\"Menu_menu-link__1WQ1O\",\"menu-link-dark\":\"Menu_menu-link-dark__2xvrZ\",\"behind-menu\":\"Menu_behind-menu__3ge-f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TopBar_container__3dLid\",\"bg-light\":\"TopBar_bg-light__3HtMS\",\"bg-dark\":\"TopBar_bg-dark__3p8ff\",\"link\":\"TopBar_link__2IXKY\",\"bars\":\"TopBar_bars__23ALz\",\"title\":\"TopBar_title__1B4TG\",\"title-dark\":\"TopBar_title-dark__3Nhts\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"separator\":\"MainContent_separator__3Q-Ye\",\"container\":\"MainContent_container__A0LE2\",\"container-dark\":\"MainContent_container-dark__WLH2v\",\"icon-group\":\"MainContent_icon-group__1lFnY\",\"icon-item\":\"MainContent_icon-item__3-_vM\",\"icon-chevron\":\"MainContent_icon-chevron__34RxQ\",\"edit-mode\":\"MainContent_edit-mode__3asVT\",\"edit-mode-dark\":\"MainContent_edit-mode-dark__iCQ1_\",\"importexport-container\":\"MainContent_importexport-container__3yKzK\",\"bg-light\":\"MainContent_bg-light__1TN-T\",\"bg-dark\":\"MainContent_bg-dark__3Nnfk\"};","export interface Mode {\r\n    showEditIcons: boolean\r\n    currentContext: string\r\n    currentTheme: number\r\n}\r\n\r\ntype Action = {\r\n    type: 'UPDATE_MODE'\r\n    data: Mode\r\n}\r\n\r\nconst updateMode = (settings: Mode): Action => {\r\n    return {\r\n        type: 'UPDATE_MODE',\r\n        data: settings\r\n    }\r\n}\r\n\r\nconst initialState: Mode = {\r\n    showEditIcons: true,\r\n    currentContext: '0',\r\n    currentTheme: 0\r\n}\r\n\r\nconst reducer = (state: Mode = initialState, action: Action): Mode => {\r\n    switch(action.type) {\r\n        case 'UPDATE_MODE':\r\n            return action.data\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { updateMode }\r\nexport default reducer\r\n","export interface Context {\r\n    id: string | null\r\n    name: string\r\n    blockCount: number\r\n    subBlockCount: number\r\n}\r\n\r\ntype ContextIDOnly = Omit<Context, 'name' | 'blockCount' | 'subBlockCount'>\r\n\r\ntype Action = {\r\n    type: 'SET_CONTEXTS'\r\n    data: Context[] \r\n} | {\r\n    type: 'ADD_CONTEXT'\r\n    data: Context\r\n} | {\r\n    type: 'UPDATE_CONTEXT'\r\n    data: Context\r\n} | {\r\n    type: 'DELETE_CONTEXT'\r\n    data: ContextIDOnly\r\n}\r\n\r\nconst setContexts = (contexts: Context[]): Action => {\r\n    return {\r\n        type: 'SET_CONTEXTS',\r\n        data: contexts\r\n    }\r\n}\r\n\r\nconst addContext = (context: Context): Action => {\r\n    return {\r\n        type: 'ADD_CONTEXT',\r\n        data: context\r\n    }\r\n}\r\n\r\nconst updateContext = (context: Context): Action => {\r\n    return {\r\n        type: 'UPDATE_CONTEXT',\r\n        data: context\r\n    }\r\n}\r\n\r\nconst deleteContext = (context: ContextIDOnly): Action => {\r\n    return {\r\n        type: 'DELETE_CONTEXT',\r\n        data: context\r\n    }\r\n}\r\n\r\nconst initialState: Context[] = [\r\n    {\r\n        id: '0',\r\n        name: 'Default Context',\r\n        blockCount: 1,\r\n        subBlockCount: 1\r\n    }\r\n]\r\n\r\nconst reducer = (state: Context[] = initialState, action: Action): Context[] => {\r\n    switch(action.type) {\r\n        case 'SET_CONTEXTS':\r\n            return action.data\r\n        case 'ADD_CONTEXT':\r\n            return [\r\n                ...state,\r\n                action.data\r\n            ]\r\n        case 'UPDATE_CONTEXT':\r\n            return state.map(context => {\r\n                if (context.id === action.data.id) {\r\n                    return {\r\n                        ...context,\r\n                        name: action.data.name\r\n                    }\r\n                }\r\n                return context\r\n            })\r\n        case 'DELETE_CONTEXT':\r\n            return state.filter(context => context.id !== action.data.id)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { setContexts, addContext, updateContext, deleteContext }\r\nexport default reducer\r\n","export interface Block {\r\n    id: string | null\r\n    name: string\r\n    context: string // reference to id\r\n    subBlockCount: number\r\n}\r\n\r\ntype BlockIDOnly = Omit<Block, 'name' | 'context' | 'subBlockCount'>\r\n\r\ntype Action = {\r\n    type: 'SET_BLOCKS'\r\n    data: Block[]\r\n} | {\r\n    type: 'ADD_BLOCK'\r\n    data: Block\r\n} | {\r\n    type: 'UPDATE_BLOCK'\r\n    data: Block\r\n} | {\r\n    type: 'DELETE_BLOCK'\r\n    data: BlockIDOnly\r\n}\r\n\r\nconst setBlocks = (blocks: Block[]): Action => {\r\n    return {\r\n        type: 'SET_BLOCKS',\r\n        data: blocks\r\n    }\r\n}\r\n\r\nconst addBlock = (block: Block): Action => {\r\n    return {\r\n        type: 'ADD_BLOCK',\r\n        data: block\r\n    }\r\n}\r\n\r\nconst updateBlock = (block: Block): Action => {\r\n    return {\r\n        type: 'UPDATE_BLOCK',\r\n        data: block\r\n    }\r\n}\r\n\r\nconst deleteBlock = (block: BlockIDOnly): Action => {\r\n    return {\r\n        type: 'DELETE_BLOCK',\r\n        data: block\r\n    }\r\n}\r\n\r\nconst initialState: Block[] = [\r\n    {\r\n        id: '0',\r\n        name: 'Example Section',\r\n        context: '0',\r\n        subBlockCount: 1\r\n    }\r\n]\r\n\r\nconst reducer = (state: Block[] = initialState, action: Action): Block[] => {\r\n    switch(action.type) {\r\n        case 'SET_BLOCKS':\r\n            return action.data\r\n        case 'ADD_BLOCK':\r\n            return [\r\n                ...state,\r\n                action.data\r\n            ]\r\n        case 'UPDATE_BLOCK':\r\n            return state.map(block => {\r\n                if (block.id === action.data.id) {\r\n                    return {\r\n                        ...block,\r\n                        name: action.data.name\r\n                    }\r\n                }\r\n                return block\r\n            })\r\n        case 'DELETE_BLOCK':\r\n            return state.filter(block => block.id !== action.data.id)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { setBlocks, addBlock, updateBlock, deleteBlock }\r\nexport default reducer\r\n","export interface SubBlock {\r\n    id: string | null\r\n    name: string\r\n    block: string // reference to id\r\n    contents: string\r\n    isStriked: boolean\r\n}\r\n\r\ntype SubBlockIDOnly = Omit<SubBlock, 'name' | 'block' | 'contents' | 'isStriked'>\r\n\r\ntype Action = {\r\n    type: 'SET_SUBBLOCKS'\r\n    data: SubBlock[]\r\n} | {\r\n    type: 'ADD_SUBBLOCK'\r\n    data: SubBlock\r\n} | {\r\n    type: 'UPDATE_SUBBLOCK'\r\n    data: SubBlock\r\n} | {\r\n    type: 'DELETE_SUBBLOCK'\r\n    data: SubBlockIDOnly\r\n}\r\n\r\nconst setSubBlocks = (subBlocks: SubBlock[]): Action => {\r\n    return {\r\n        type: 'SET_SUBBLOCKS',\r\n        data: subBlocks\r\n    }\r\n}\r\n\r\nconst addSubBlock = (subBlock: SubBlock): Action => {\r\n    return {\r\n        type: 'ADD_SUBBLOCK',\r\n        data: subBlock\r\n    }\r\n}\r\n\r\nconst updateSubBlock = (subBlock: SubBlock): Action => {\r\n    return {\r\n        type: 'UPDATE_SUBBLOCK',\r\n        data: subBlock\r\n    }\r\n}\r\n\r\nconst deleteSubBlock = (subBlock: SubBlockIDOnly): Action => {\r\n    return {\r\n        type: 'DELETE_SUBBLOCK',\r\n        data: subBlock\r\n    }\r\n}\r\n\r\nconst initialState: SubBlock[] = [\r\n    {\r\n        id: '0',\r\n        name: 'Example Item',\r\n        block: '0',\r\n        contents: `Here, you can write notes for an item.\r\n            \\n[You can also add links that open to a new page](https://example.com) \r\n            \\nClick on an item title to strike it out, and click the edit or plus buttons to modify or add new content respectively.`,\r\n        isStriked: false\r\n    }\r\n]\r\n\r\nconst reducer = (state: SubBlock[] = initialState, action: Action): SubBlock[] => {\r\n    switch(action.type) {\r\n        case 'SET_SUBBLOCKS':\r\n            return action.data\r\n        case 'ADD_SUBBLOCK':\r\n            return [\r\n                ...state,\r\n                action.data\r\n            ]\r\n        case 'UPDATE_SUBBLOCK':\r\n            return state.map(subBlock => {\r\n                if (subBlock.id === action.data.id) {\r\n                    return {\r\n                        ...subBlock,\r\n                        name: action.data.name,\r\n                        contents: action.data.contents,\r\n                        isStriked: action.data.isStriked\r\n                    }\r\n                }\r\n                return subBlock\r\n            })\r\n        case 'DELETE_SUBBLOCK':\r\n            return state.filter(subBlock => subBlock.id !== action.data.id)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { setSubBlocks, addSubBlock, updateSubBlock, deleteSubBlock }\r\nexport default reducer\r\n","import { createStore, combineReducers } from 'redux'\r\nimport { createSelectorHook } from 'react-redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport modeReducer, { Mode } from './reducers/modeReducer'\r\nimport contextsReducer, { Context } from './reducers/contextsReducer'\r\nimport blocksReducer, { Block } from './reducers/blocksReducer'\r\nimport subBlocksReducer, { SubBlock } from './reducers/subBlocksReducer'\r\n\r\nexport interface RootState {\r\n    mode: Mode\r\n    contexts: Context[]\r\n    blocks: Block[]\r\n    subBlocks: SubBlock[]\r\n}\r\n\r\nconst reducer = combineReducers({\r\n    mode: modeReducer,\r\n    contexts: contextsReducer,\r\n    blocks: blocksReducer,\r\n    subBlocks: subBlocksReducer\r\n})\r\n\r\nconst store = createStore(reducer, composeWithDevTools())\r\n\r\n// A custom selector is used purely for the sake of typing with TypeScript\r\nconst useCustomSelector = createSelectorHook<RootState>()\r\n\r\nexport { useCustomSelector }\r\nexport default store\r\n","const iconColors = {\r\n    blue: {\r\n        '100': '#57869F',\r\n        '200': '#79bee4',\r\n        '300': '#5d8bb6'\r\n    },\r\n    gray: {\r\n        '100': '#A9B1BF'\r\n    }\r\n}\r\n\r\nexport default iconColors","export const BASEPATH = '/organize-app'","import React, { useRef, useEffect, Dispatch, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport style from './Menu.module.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretRight, faCircle, faMoon, faSun, faSquare, faCheckSquare } from '@fortawesome/free-solid-svg-icons'\r\nimport { updateMode } from '../../reducers/modeReducer'\r\nimport { useCustomSelector } from '../../store'\r\nimport iconColors from '../../iconColors'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { BASEPATH } from '../../constants'\r\n\r\ninterface Props {\r\n    showMenu?: boolean\r\n    setShowMenu?: Dispatch<boolean>\r\n    isDropdown: boolean\r\n    usingDropdown: boolean\r\n}\r\n\r\nconst Menu = ({showMenu, setShowMenu, isDropdown, usingDropdown}: Props) => {\r\n    const [timeOutId, setTimeOutId] = useState<number | null>(null)\r\n    const { contexts, mode } = useCustomSelector(state => state)\r\n    const menu = useRef<HTMLDivElement>(null)\r\n    const dispatch = useDispatch()\r\n    const location = useLocation()\r\n\r\n    useEffect(() => {\r\n        // Changing location closes the dropdown menu\r\n        if (isDropdown && setShowMenu) {\r\n            setShowMenu(false)\r\n        }\r\n    }, [location, setShowMenu, isDropdown])\r\n    \r\n    useEffect(() => {\r\n        // If the dropdown menu is open, close it when we click outside of it\r\n        const closeMenu = (event: any) => {\r\n            if (menu.current !== null\r\n                && !menu.current.contains(event.target)\r\n                && setShowMenu) {\r\n                setShowMenu(false)\r\n            }\r\n        }\r\n        if (showMenu && isDropdown) {\r\n            document.addEventListener('click', closeMenu)\r\n        }\r\n        return () => document.removeEventListener('click', closeMenu)\r\n    }, [showMenu, setShowMenu, isDropdown])\r\n    \r\n    // If this is the dropdown version of the component and we aren't using dropdown, \r\n    // or if the menu is meant to be hidden, don't render the component\r\n    if ((isDropdown && !usingDropdown) || (usingDropdown && !showMenu)) return null\r\n\r\n    const toggleTheme = (): void => {\r\n        dispatch(updateMode({...mode, currentTheme: Number(!mode.currentTheme)}))\r\n    }\r\n\r\n    const toggleEditIcons = (): void => {\r\n        dispatch(updateMode({...mode, showEditIcons: !mode.showEditIcons}))\r\n    }\r\n\r\n    const handleContextChange = (event: any): void => {\r\n        if (mode.currentContext !== event.target.id) {\r\n            dispatch(updateMode({ ...mode, currentContext: event.target.id }))\r\n        }\r\n    }\r\n\r\n    // Deal with closing the dropdown menu if we tab out to content beneath it\r\n    const handleOnBlur = (): void => {\r\n        if (isDropdown && setShowMenu) {\r\n            setTimeOutId(setTimeout(() => {\r\n                setShowMenu(false)\r\n            }))\r\n        }\r\n    }\r\n\r\n    const handleOnFocus = (): void => {\r\n        if (timeOutId !== null && isDropdown) {\r\n            clearTimeout(timeOutId)\r\n        }\r\n    }\r\n\r\n    const darkMode = mode.currentTheme === 1\r\n    const containerThemeColor = darkMode ? style['container-dark'] : style['container']\r\n    const iconThemeColor = darkMode ? iconColors.blue['200'] : iconColors.blue['100']\r\n\r\n    const mainMenuItems = [\r\n        { name: 'Manage Contexts', path: `${BASEPATH}/managecontexts` },\r\n        { name: 'Import / Export Data', path: `${BASEPATH}/importexport` },\r\n        { name: 'About', path: `${BASEPATH}/about` },\r\n    ]\r\n    const menuIcon = <FontAwesomeIcon icon={faCaretRight} color={iconThemeColor} />\r\n    const currentContextIcon = <span \r\n        className={style['current-context-icon']}>\r\n            <FontAwesomeIcon icon={faCircle} color={iconThemeColor} size='xs' />\r\n        </span>\r\n\r\n    return (\r\n        <>\r\n            <div id={style['behind-menu']}></div>\r\n            <div \r\n                id={style.container} \r\n                className={`${style['slide-out']} ${containerThemeColor}`} \r\n                ref={menu}\r\n                onBlur={handleOnBlur}\r\n                onFocus={handleOnFocus}>\r\n                <nav id={style.inner}>\r\n                    <ul>\r\n                        <li>\r\n                            { !darkMode ?\r\n                                <button name='dark mode' title='Dark mode' onClick={toggleTheme}>\r\n                                    <FontAwesomeIcon icon={faMoon} color={iconThemeColor} />{' '}Dark Mode\r\n                                </button> :\r\n                                <button name='light mode' title='Light mode' onClick={toggleTheme}>\r\n                                    <FontAwesomeIcon icon={faSun} color={iconThemeColor} />{' '}Light Mode\r\n                                </button> }\r\n                        </li>\r\n                        <li>\r\n                            { mode.showEditIcons ?\r\n                                <button name='hide edit icons' title='Hide edit icons' onClick={toggleEditIcons}>\r\n                                    <FontAwesomeIcon icon={faCheckSquare} color={iconThemeColor} />{' '}Show Edit Icons\r\n                                </button> :\r\n                                <button name='show edit icons' title='Show edit icons' onClick={toggleEditIcons}>\r\n                                    <FontAwesomeIcon icon={faSquare} color={iconThemeColor} />{' '}Show Edit Icons\r\n                                </button> }\r\n                        </li>\r\n                        <hr className={darkMode ? 'hr-dark' : ''} />\r\n                        { contexts\r\n                            .map((c, i) => <li key={i}>\r\n                                    {c.id === mode.currentContext ? currentContextIcon : menuIcon}{' '}\r\n                                    <span className={mode.currentContext === c.id && location.pathname === `${BASEPATH}/` ? 'underline' : ''}>\r\n                                        <Link\r\n                                            id={c.id || undefined} \r\n                                            onClick={handleContextChange}\r\n                                            className={`${style['menu-link']} ${darkMode && style['menu-link-dark']}`}\r\n                                            to={`${BASEPATH}/`}>\r\n                                                {c.name}\r\n                                        </Link>\r\n                                    </span>\r\n                                </li>) }\r\n                        <hr className={darkMode ? 'hr-dark' : ''} />\r\n                        { mainMenuItems\r\n                            .map((item, i) => \r\n                                <li key={i}>\r\n                                    {menuIcon}{' '}\r\n                                    <span className={location.pathname === item.path ? 'underline' : ''}>\r\n                                        <Link \r\n                                            className={`${style['menu-link']} ${darkMode && style['menu-link-dark']}`} \r\n                                            to={item.path}>\r\n                                                {item.name}\r\n                                        </Link>\r\n                                    </span>\r\n                                </li>) }\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Menu\r\n","import React, { useState } from 'react'\r\nimport style from './TopBar.module.css'\r\nimport { useCustomSelector } from '../../store'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport iconColors from '../../iconColors'\r\nimport Menu from '../Menu/Menu'\r\nimport { Link } from 'react-router-dom'\r\nimport { BASEPATH } from '../../constants'\r\n\r\nconst TopBar = ({usingDropdown}: { usingDropdown: boolean }) => {\r\n    const [showMenu, setShowMenu] = useState(false)\r\n    const mode = useCustomSelector(state => state.mode)\r\n\r\n    const toggleMenu = () => {\r\n        setShowMenu(prevState => !prevState)\r\n    }\r\n\r\n    const darkMode = mode.currentTheme === 1\r\n\r\n    return (\r\n        <>\r\n            <header id={style.container} className={`${darkMode ? style['bg-dark'] : style['bg-light']}`}>\r\n                <h1 id={style.title}>\r\n                    <Link className={darkMode ? style['title-dark'] : style.title} to={`${BASEPATH}/`}>Organize</Link>\r\n                </h1>\r\n                <div id={style.bars}>\r\n                    <button name='menu' title='Menu' onClick={toggleMenu}>\r\n                        <FontAwesomeIcon icon={faBars} color={darkMode ? iconColors.blue['200'] : iconColors.blue['100']} />\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <div id={style.test}>\r\n                <Menu \r\n                    showMenu={showMenu} \r\n                    setShowMenu={setShowMenu} \r\n                    isDropdown={true} \r\n                    usingDropdown={usingDropdown} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { Dispatch } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { useCustomSelector } from '../../store'\r\n\r\ninterface Props {\r\n    type: 'CONTEXT' | 'SUBBLOCK'\r\n    modalIsOpen: boolean\r\n    setModalIsOpen: Dispatch<boolean>\r\n    handleDelete: () => void\r\n    name?: string\r\n}\r\n\r\nconst DeletionModal = ({type, modalIsOpen, setModalIsOpen, handleDelete, name}: Props) => {\r\n    const mode = useCustomSelector(state => state.mode)\r\n    const darkMode = mode.currentTheme === 1\r\n\r\n    let topMessage = '', mainMessage = ''\r\n\r\n    switch (type) {\r\n        case 'CONTEXT':\r\n            topMessage = `Delete ${name}?`\r\n            mainMessage = `ALL sections and items within ${name} will be deleted.`\r\n            break\r\n        case 'SUBBLOCK':\r\n            topMessage = 'Delete this item?'\r\n            mainMessage = 'If it\\'s the only item left in a section, the section will be deleted.'\r\n            break\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalIsOpen}\r\n            className={`modal ${darkMode && 'modal-dark'}`}\r\n            overlayClassName={darkMode ? 'modal-overlay-dark' : ''}\r\n            ariaHideApp={false} >\r\n            <div>\r\n                <div className={`bolder ${darkMode && 'bolder-dark'}`} style={{ paddingBottom: 10 }}>\r\n                    {topMessage}\r\n                </div>\r\n                {mainMessage}\r\n            </div>\r\n            <div className='modal-buttons'>\r\n                <button \r\n                    name='confirm delete'\r\n                    title='Confirm delete'\r\n                    className={`choice-button button-delete bolder ${darkMode && 'button-delete-dark bolder-dark'}`} \r\n                    onClick={handleDelete}>\r\n                    Yes, delete it!\r\n                </button>\r\n                <button \r\n                    name='cancel'\r\n                    title='Cancel'\r\n                    className={`choice-button button-neutral bolder ${darkMode && 'button-neutral-dark bolder-dark'}`} \r\n                    onClick={() => setModalIsOpen(false)}>\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default DeletionModal\r\n","import React, { useState, Dispatch } from 'react'\r\nimport style from './EditingBar.module.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit, faPlus, faTrash, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport iconColors from '../../../../iconColors'\r\nimport { useCustomSelector } from '../../../../store'\r\nimport DeletionModal from '../../DeletionModal'\r\n\r\ninterface Props {\r\n    isEditing: boolean\r\n    setIsEditing: Dispatch<boolean>\r\n    handleEdit: () => void\r\n    handleSubmit: () => void\r\n    handleAddSubBlock: () => void\r\n    handleDeleteSubBlock: () => void\r\n    isLast: boolean\r\n}\r\n\r\nconst EditingBar = ({ \r\n    isEditing, \r\n    setIsEditing, \r\n    handleEdit, \r\n    handleSubmit,\r\n    handleAddSubBlock,\r\n    handleDeleteSubBlock,\r\n    isLast }: Props) => {\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const { mode, contexts } = useCustomSelector(state => state)\r\n\r\n    const context = contexts.find(c => c.id === mode.currentContext)\r\n    const darkMode = mode.currentTheme === 1\r\n    const iconThemeColor = darkMode ? iconColors.blue['200'] : iconColors.blue['100']\r\n\r\n    return (\r\n        <>\r\n            <DeletionModal\r\n                type='SUBBLOCK'\r\n                modalIsOpen={modalIsOpen}\r\n                setModalIsOpen={setModalIsOpen}\r\n                handleDelete={handleDeleteSubBlock} />\r\n            { mode.showEditIcons ?\r\n                <div id={style.container} className={ darkMode ?  style['container-dark'] : style.container }>\r\n                    { isEditing ?\r\n                    <>\r\n                        <button name='save changes' title='Save changes' id={style['inner-container']} onClick={handleSubmit}>\r\n                            <FontAwesomeIcon \r\n                                className={style['icon-item']} icon={faCheck} color={iconThemeColor} size='lg' />\r\n                            <span>Save Changes</span>\r\n                        </button>\r\n                        <button name='cancel' title='Cancel' onClick={() => setIsEditing(false)}>\r\n                            <FontAwesomeIcon \r\n                                className={style['icon-item']} icon={faTimes} color={iconThemeColor} size='lg' />\r\n                        </button>\r\n                    </>\r\n                    :<>\r\n                        <button name='edit item' title='Edit item' onClick={handleEdit}>\r\n                            <FontAwesomeIcon \r\n                                className={style['icon-item']} icon={faEdit} color={iconThemeColor} size='lg' />\r\n                        </button>\r\n                        { isLast &&\r\n                            <button name='new item' title='New item' onClick={handleAddSubBlock}>\r\n                                <FontAwesomeIcon \r\n                                    className={style['icon-item']} icon={faPlus} color={iconThemeColor} size='lg' />\r\n                            </button> }\r\n                        { (context && (context.blockCount > 1 || context.subBlockCount > 1)) &&\r\n                            <button name='delete item' title='Delete item' onClick={() => setModalIsOpen(true)}>\r\n                                <FontAwesomeIcon \r\n                                    className={style['icon-item']} icon={faTrash} color={iconThemeColor} size='lg' />\r\n                            </button> }\r\n                    </> }\r\n                </div> : \r\n                <div id={style['container-small']} className={ darkMode ?  style['container-dark'] : style.container } /> }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditingBar\r\n\r\n","import store, { RootState } from './store'\r\nimport { Mode, updateMode } from './reducers/modeReducer'\r\nimport { Context, setContexts } from './reducers/contextsReducer'\r\nimport { Block, setBlocks } from './reducers/blocksReducer'\r\nimport { SubBlock, setSubBlocks } from './reducers/subBlocksReducer'\r\n\r\n// Swap contexts above or below the given index, then return the new array\r\nconst swapContexts = (contexts: any[], index: number, type: 'UP' | 'DOWN'): any[] => {\r\n    const newArr = [...contexts]\r\n\r\n    switch(type) {\r\n        case 'UP':\r\n            [\r\n                newArr[index - 1], \r\n                newArr[index]\r\n            ] = [\r\n                newArr[index], \r\n                newArr[index - 1]\r\n            ]\r\n            break\r\n        case 'DOWN':\r\n            [\r\n                newArr[index + 1], \r\n                newArr[index]\r\n            ] = [\r\n                newArr[index], \r\n                newArr[index + 1]\r\n            ]\r\n            break\r\n    }\r\n\r\n    return newArr\r\n}\r\n\r\n// The purpose is the same as above, but this is for swapping items with a scoped relationship,\r\n// such as blocks and subblocks\r\nconst swapItems = (scopedItems: any[], allItems: any[], index: number, type: 'UP' | 'DOWN'): any[] => {\r\n    const newScopedArr = [...scopedItems]\r\n    const newAllArr = [...allItems]\r\n    const updatedItem = { ...scopedItems[index], newPlaceId: null }\r\n    let oldItem: any = null\r\n\r\n    switch(type) {\r\n        case 'UP':\r\n            oldItem = { ...newScopedArr[index - 1], newPlaceId: newScopedArr[index].id }\r\n            updatedItem.newPlaceId = newScopedArr[index - 1].id\r\n            break\r\n        case 'DOWN':\r\n            oldItem = { ...newScopedArr[index + 1], newPlaceId: newScopedArr[index].id }\r\n            updatedItem.newPlaceId = newScopedArr[index + 1].id\r\n            break\r\n    }\r\n\r\n    return newAllArr.map(item => {\r\n        if (item.id === updatedItem.newPlaceId) {\r\n            delete updatedItem.newPlaceId\r\n            return updatedItem\r\n        } else if (item.id === oldItem.newPlaceId) {\r\n            delete oldItem.newPlaceId\r\n            return oldItem\r\n        }\r\n        return item\r\n    })\r\n}\r\n\r\ninterface BlockCounter {\r\n    [id: string]: {\r\n        context?: string\r\n        blockCount?: number\r\n        subBlockCount: number\r\n    }\r\n}\r\n\r\n// Set state from external sources such as local storage or imports\r\nconst validateAndSetState = ({ mode, contexts, blocks, subBlocks }: RootState, imported: boolean): void => {\r\n    if (mode && contexts && blocks && subBlocks) {\r\n        // Handle mode\r\n        const { showEditIcons, currentContext, currentTheme } = mode\r\n        const newMode: Mode = {\r\n            showEditIcons: showEditIcons,\r\n            currentContext: (currentContext || '0'),\r\n            currentTheme: (Number(currentTheme) || 0)\r\n        }\r\n\r\n        const newContexts: Context[] = [...contexts]\r\n        const newBlocks: Block[] = [...blocks]\r\n        const newSubBlocks: SubBlock[] = [...subBlocks]\r\n\r\n        // Extra validation when data is imported by the user\r\n        if (imported) {\r\n            // Validate properties, and correctly set block/subblock counts\r\n            const newContextCounts: BlockCounter = {}\r\n            const newBlockCounts: BlockCounter = {}\r\n\r\n            newContexts.forEach(c => {\r\n                // Validation\r\n                const { id, name } = c\r\n                let missingCProperty = null\r\n                if (!id || typeof id !== 'string') missingCProperty = 'ID'\r\n                if (!name || typeof name !== 'string') missingCProperty = 'name'\r\n\r\n                if (missingCProperty !== null) {\r\n                    throw new Error(`A context's ${missingCProperty} is missing or in the wrong format`)\r\n                }\r\n\r\n                // Counting\r\n                newContextCounts[c.id as string] = { blockCount: 0, subBlockCount: 0 }\r\n            })\r\n\r\n            newBlocks.forEach(b => {\r\n                // Validation\r\n                const { id, name, context } = b\r\n                let missingBProperty = null\r\n                if (!id || typeof id !== 'string') missingBProperty = 'ID'\r\n                if (!name || typeof name !== 'string') missingBProperty = 'name'\r\n                if (!context || typeof context !== 'string') missingBProperty = 'context'\r\n\r\n                if (missingBProperty !== null) {\r\n                    throw new Error(`A block's ${missingBProperty} is missing or in the wrong format`)\r\n                }\r\n\r\n                // Counting\r\n                if (newContextCounts[b.context]?.hasOwnProperty('blockCount')) {\r\n                    const count = newContextCounts[b.context].blockCount as number\r\n                    newContextCounts[b.context].blockCount = count + 1\r\n                }\r\n\r\n                newBlockCounts[b.id as string] = { context: b.context, subBlockCount: 0 }\r\n            })\r\n\r\n            newSubBlocks.forEach(sb => {\r\n                // Validation\r\n                const { id, name, block, contents, isStriked } = sb\r\n                let missingSBProperty = null\r\n                if (!id || typeof id !== 'string') missingSBProperty = 'ID'\r\n                if (!name || typeof name !== 'string') missingSBProperty = 'name'\r\n                if (!block || typeof block !== 'string') missingSBProperty = 'block'\r\n\r\n                if (missingSBProperty !== null) {\r\n                    throw new Error(`A subblock's ${missingSBProperty} is missing or in the wrong format`)\r\n                }\r\n\r\n                if (!contents || typeof contents !== 'string') sb.contents = ''\r\n                if (!isStriked || typeof isStriked !== 'boolean') sb.isStriked = false\r\n\r\n                // Counting\r\n                if (newBlockCounts[sb.block]?.hasOwnProperty('subBlockCount')) {\r\n                    const count = newBlockCounts[sb.block].subBlockCount as number\r\n                    newBlockCounts[sb.block].subBlockCount = count + 1\r\n                }\r\n                if (newBlockCounts[sb.block]?.context) {\r\n                    const contextId = newBlockCounts[sb.block].context as string\r\n                    const count = newContextCounts[contextId].subBlockCount as number\r\n                    newContextCounts[contextId].subBlockCount = count + 1\r\n                }\r\n            })\r\n\r\n            // Set counts\r\n            newContexts.forEach(c => {\r\n                if (c.id) {\r\n                    if (newContextCounts[c.id].blockCount === 0 || newContextCounts[c.id].subBlockCount === 0) {\r\n                        throw new Error('Contexts must have at least one block and one subblock')\r\n                    }\r\n\r\n                    c.blockCount = newContextCounts[c.id].blockCount as number\r\n                    c.subBlockCount = newContextCounts[c.id].subBlockCount as number\r\n                }\r\n            })\r\n            newBlocks.forEach(b => {\r\n                if (b.id) {\r\n                    b.subBlockCount = newBlockCounts[b.id].subBlockCount as number\r\n                }\r\n            })\r\n        }\r\n        \r\n        store.dispatch(updateMode(newMode))\r\n        store.dispatch(setContexts(newContexts))\r\n        store.dispatch(setBlocks(newBlocks))\r\n        store.dispatch(setSubBlocks(newSubBlocks))\r\n    } else {\r\n        throw new Error('Unable to save, data is missing')\r\n    }\r\n}\r\n\r\nexport { swapContexts, swapItems, validateAndSetState }\r\n","import React, { useState, useRef, useLayoutEffect, useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useCustomSelector } from '../../../store'\r\nimport { updateContext } from '../../../reducers/contextsReducer'\r\nimport { SubBlock as SubBlockData,\r\n    updateSubBlock, addSubBlock, deleteSubBlock, setSubBlocks } from '../../../reducers/subBlocksReducer'\r\nimport { updateBlock, deleteBlock } from '../../../reducers/blocksReducer'\r\nimport TextareaAutosize from 'react-textarea-autosize'\r\nimport EditingBar from './EditingBar/EditingBar'\r\nimport style from '../MainContent.module.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\r\nimport iconColors from '../../../iconColors'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { swapItems } from '../../../utils'\r\n\r\n\r\nconst SubBlock = ({subBlock, isLast}: { subBlock: SubBlockData, isLast: boolean }) => {\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [subNameValue, setSubNameValue] = useState('')\r\n    const [contentsValue, setContentsValue] = useState(subBlock.contents)\r\n    const [parsedContents, setParsedContents] = useState(subBlock.contents)\r\n    const subNameInput = useRef<HTMLInputElement>(null)\r\n    const { contexts, blocks, subBlocks, mode } = useCustomSelector(state => state)\r\n    const currentBlockSubBlocks = subBlocks.filter(sb => sb.block === subBlock.block)\r\n    const index = currentBlockSubBlocks.findIndex(sb => sb.id === subBlock.id)\r\n    const dispatch = useDispatch()\r\n\r\n    const darkMode = mode.currentTheme === 1\r\n    const iconThemeColor = darkMode ? iconColors.blue['300'] : iconColors.gray['100']\r\n\r\n    useLayoutEffect(() => {\r\n        if (subNameInput.current !== null && isEditing) {\r\n            subNameInput.current.focus()\r\n        }\r\n    }, [isEditing])\r\n\r\n    const parseUrlFromContents = useCallback((contents: string) => {\r\n        // Match the pattern: [title](https://example.com)\r\n        const urlMarkdownRegex = /^\\[([\\w\\s\\d\\W]+)\\]\\((https?:\\/\\/[\\w\\d./?=#]+)\\)$/\r\n        // Split at spaces and new lines\r\n        let content = contents.split(/[\\s]+/)\r\n\r\n        // Remerge elements between [] brackets\r\n        const contentArr = []\r\n        let titleArr = []\r\n        let addingToTitle = false\r\n\r\n        for (let i = 0; i < content.length; i++) {\r\n            // Handle no spaces\r\n            if (content[i].startsWith('[') && content[i].endsWith(')')) {\r\n                contentArr.push(content[i])\r\n                continue\r\n            }\r\n\r\n            // Handle spaces\r\n            if (content[i].startsWith('[')) {\r\n                addingToTitle = true\r\n                titleArr.push(content[i])\r\n                continue\r\n            } else if (content[i].endsWith(')')) {\r\n                addingToTitle = false\r\n                titleArr.push(content[i])\r\n                contentArr.push(titleArr.join(' '))\r\n                titleArr = []\r\n                continue\r\n            }\r\n\r\n            if (addingToTitle) {\r\n                titleArr.push(content[i])\r\n            } else {\r\n                contentArr.push(content[i])\r\n            }\r\n        }\r\n\r\n        // Format and replace links\r\n        let toReplace: string[][] = []\r\n\r\n        contentArr.forEach(c => {\r\n            if (urlMarkdownRegex.test(c)) {\r\n                const strArr = c.split('')\r\n                let title = [], url = []\r\n                let modifyingTitle = true\r\n\r\n                for (let i = 1; i < strArr.length - 1; i++) {\r\n                    if (strArr[i] === ']') {\r\n                        modifyingTitle = false\r\n                        i++\r\n                        continue\r\n                    }\r\n\r\n                    if (modifyingTitle) {\r\n                        title.push(strArr[i])\r\n                    } else {\r\n                        url.push(strArr[i])\r\n                    }\r\n                }\r\n                toReplace.push([c, `<a href='${url.join('')}' target='_blank' ${darkMode && 'class=\"a-dark\"'} rel='noreferrer noopener'>${title.join('')}</a>`])\r\n            }\r\n        })\r\n\r\n        toReplace.forEach(el => {\r\n            contents = contents.replace(el[0], el[1])\r\n        })\r\n\r\n        setParsedContents(contents)\r\n    }, [darkMode])\r\n\r\n    useLayoutEffect(() => {\r\n        parseUrlFromContents(subBlock.contents)\r\n    }, [subBlock.contents, mode, parseUrlFromContents])\r\n\r\n    const handleEdit = (): void => {\r\n        setIsEditing(true)\r\n        setSubNameValue(subBlock.name)\r\n        setContentsValue(subBlock.contents)\r\n    }\r\n\r\n    const handleSubmit = (): void => {\r\n        setIsEditing(false)\r\n        dispatch(updateSubBlock({\r\n            ...subBlock,\r\n            name: subNameValue,\r\n            contents: contentsValue,\r\n        }))\r\n        parseUrlFromContents(contentsValue)\r\n    }\r\n\r\n    const handleAddSubBlock = (): void => {\r\n        const block = blocks.find(b => b.id === subBlock.block)\r\n        const context = contexts.find(c => c.id === block?.context)\r\n        if (block && context) {\r\n            context.subBlockCount++\r\n            block.subBlockCount++\r\n            dispatch(updateContext(context))\r\n            dispatch(updateBlock(block))\r\n            dispatch(addSubBlock({\r\n                id: uuidv4(),\r\n                name: 'New Item',\r\n                block: subBlock.block,\r\n                contents: '',\r\n                isStriked: false\r\n            }))\r\n        }\r\n    }\r\n\r\n    const handleDeleteSubBlock = (): void => {\r\n        const block = blocks.find(b => b.id === subBlock.block)\r\n        const context = contexts.find(c => c.id === block?.context)\r\n\r\n        if (block && context) {\r\n            block.subBlockCount--\r\n            dispatch(deleteSubBlock({ id: subBlock.id }))\r\n\r\n            if (block.subBlockCount === 0) {\r\n                context.blockCount--\r\n                dispatch(deleteBlock({ id: block.id }))\r\n            } else {\r\n                dispatch(updateBlock(block))\r\n            }\r\n\r\n            context.subBlockCount--\r\n            dispatch(updateContext(context))\r\n        }\r\n    }\r\n\r\n    const handleToggleStriked = (): void => {\r\n        dispatch(updateSubBlock({ ...subBlock, isStriked: !subBlock.isStriked }))\r\n    }\r\n\r\n    const handleReorder = (dir: 'UP' | 'DOWN'): void => {\r\n        const newSubBlocks = swapItems(currentBlockSubBlocks, subBlocks, index, dir)\r\n        dispatch(setSubBlocks(newSubBlocks))\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            { isEditing ?\r\n                <>\r\n                    <h2 className='fullwidth'>\r\n                        <input\r\n                            className={`${style['edit-mode']} ${darkMode && style['edit-mode-dark']} h2-input ${darkMode ? 'input-dark' : ''}`}\r\n                            name='item name'\r\n                            title='Item name'\r\n                            ref={subNameInput}\r\n                            value={subNameValue}\r\n                            onChange={({target}) => setSubNameValue(target.value)}\r\n                            placeholder='Subtitle' />\r\n                    </h2>\r\n                    <TextareaAutosize \r\n                        className={`${style['edit-mode']} ${darkMode ? `input-dark ${style['edit-mode-dark']}` : ''}`}\r\n                        name='notes'\r\n                        title='Notes'\r\n                        value={contentsValue}\r\n                        onChange={({target}) => setContentsValue(target.value)}\r\n                        placeholder='Notes' />\r\n                    <p className={`info ${darkMode && 'info-dark'}`}>\r\n                        Links can be added by using <code>[title](https://example.com)</code>\r\n                    </p>\r\n                </>\r\n                : <>\r\n                    <h2>\r\n                        <button \r\n                            onClick={handleToggleStriked}\r\n                            className={`strikable ${subBlock.isStriked && 'striked'}`}\r\n                            name={subBlock.isStriked ? 'striked item' : 'unstriked item'}\r\n                            title='Toggle striked'>\r\n                            {subBlock.name}\r\n                        </button>\r\n                    </h2>\r\n                    { mode.showEditIcons &&\r\n                        <span className={style['icon-group']}>\r\n                            { (index > 0 || index < currentBlockSubBlocks.length - 1) &&\r\n                                <>\r\n                                { index > 0 ?\r\n                                    <button name='move item up' title='Item up' className={`${style['icon-item']} ${style['icon-chevron']}`} \r\n                                        onClick={() => handleReorder('UP')}>\r\n                                        <FontAwesomeIcon icon={faChevronUp} color={iconThemeColor} size='lg' />\r\n                                    </button> :\r\n                                    <button name='move item up' className={`${style['icon-item']} ${style['icon-chevron']} disabled`} disabled>\r\n                                        <FontAwesomeIcon icon={faChevronUp} color={iconThemeColor} size='lg' />\r\n                                    </button> }\r\n                                { index < currentBlockSubBlocks.length - 1 ?\r\n                                    <button name='move item down' title='Item down' className={`${style['icon-item']} ${style['icon-chevron']}`} \r\n                                        onClick={() => handleReorder('DOWN')}>\r\n                                        <FontAwesomeIcon icon={faChevronDown} color={iconThemeColor} size='lg' />\r\n                                    </button> :\r\n                                    <button name='move item down' className={`${style['icon-item']} ${style['icon-chevron']} disabled`} disabled>\r\n                                        <FontAwesomeIcon icon={faChevronDown} color={iconThemeColor} size='lg' />\r\n                                    </button> }\r\n                                </> }\r\n                        </span> }\r\n                    {\r\n                        // It's okay, users can only see their own input :)\r\n                    }\r\n                    { contentsValue &&\r\n                        <p dangerouslySetInnerHTML={{ __html: parsedContents }} /> }\r\n                </> }\r\n            <EditingBar \r\n                isEditing={isEditing} \r\n                setIsEditing={setIsEditing} \r\n                handleEdit={handleEdit} \r\n                handleSubmit={handleSubmit}\r\n                handleAddSubBlock={handleAddSubBlock}\r\n                handleDeleteSubBlock={handleDeleteSubBlock}\r\n                isLast={isLast} />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default SubBlock\r\n","import React, { useState, useRef, useLayoutEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useCustomSelector } from '../../../store'\r\nimport { Block as BlockData, updateBlock, addBlock, setBlocks } from '../../../reducers/blocksReducer'\r\nimport { addSubBlock } from '../../../reducers/subBlocksReducer'\r\nimport { updateContext } from '../../../reducers/contextsReducer'\r\nimport SubBlock from './SubBlock'\r\nimport style from '../MainContent.module.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit, faPlus, faCheck, faTimes, faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\r\nimport iconColors from '../../../iconColors'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { swapItems } from '../../../utils'\r\n\r\nconst Block = ({ block, isLast }: { block: BlockData, isLast: boolean }) => {\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [nameValue, setNameValue] = useState('')\r\n    const nameInput = useRef<HTMLInputElement>(null)\r\n    const { blocks, subBlocks, contexts, mode } = useCustomSelector(state => state)\r\n    const currentContextBlocks = blocks.filter(b => b.context === mode.currentContext)\r\n    const index = currentContextBlocks.findIndex(b => b.id === block.id)\r\n    const dispatch = useDispatch()\r\n\r\n    useLayoutEffect(() => {\r\n        if (nameInput.current !== null && isEditing) {\r\n            nameInput.current.focus()\r\n        }\r\n    }, [isEditing])\r\n\r\n    const handleEdit = (): void => {\r\n        setIsEditing(true)\r\n        setNameValue(block.name)\r\n    }\r\n\r\n    const handleSubmit = (): void => {\r\n        setIsEditing(false)\r\n        dispatch(updateBlock({ ...block, name: nameValue }))\r\n    }\r\n\r\n    const handleAddBlock = (): void => {\r\n        const newBlockId = uuidv4()\r\n        const context = contexts.find(c => c.id === block.context)\r\n        if (context) {\r\n            context.blockCount++\r\n            context.subBlockCount++\r\n            dispatch(updateContext(context))\r\n            dispatch(addBlock({\r\n                id: newBlockId,\r\n                name: 'New Section',\r\n                context: block.context,\r\n                subBlockCount: 1\r\n            }))\r\n            dispatch(addSubBlock({\r\n                id: uuidv4(),\r\n                name: 'New Item',\r\n                block: newBlockId,\r\n                contents: '',\r\n                isStriked: false\r\n            }))\r\n        }\r\n    }\r\n\r\n    const handleReorder = (dir: 'UP' | 'DOWN'): void => {\r\n        const newBlocks = swapItems(currentContextBlocks, blocks, index, dir)\r\n        dispatch(setBlocks(newBlocks))\r\n    }\r\n\r\n    const darkMode = mode.currentTheme === 1\r\n    const iconThemeColor = darkMode ? iconColors.blue['300'] : iconColors.gray['100']\r\n\r\n    return (\r\n        <section>\r\n            { isEditing ?\r\n                <h1 className='fullwidth'>\r\n                    <input \r\n                        className={`${style['edit-mode']} ${darkMode && style['edit-mode-dark']} h1-input ${darkMode ? 'input-dark' : ''}`}\r\n                        name='section name'\r\n                        title='Section name'\r\n                        ref={nameInput}\r\n                        value={nameValue} \r\n                        onChange={({target}) => setNameValue(target.value)}  \r\n                        placeholder='Title' />\r\n                </h1>\r\n                : <h1>{block.name}</h1> }\r\n            { mode.showEditIcons &&\r\n                <span className={style['icon-group']}>\r\n                    { isEditing ?\r\n                        <>\r\n                            <button name='save changes' title='Save changes' className={style['icon-item']} \r\n                                onClick={handleSubmit}>\r\n                                <FontAwesomeIcon icon={faCheck} color={iconThemeColor} size='lg' />\r\n                            </button>\r\n                            <button name='cancel' title='Cancel' className={style['icon-item']} \r\n                                onClick={() => setIsEditing(false)}>\r\n                                <FontAwesomeIcon icon={faTimes} color={iconThemeColor} size='lg' />\r\n                            </button>\r\n                        </>\r\n                        :<>\r\n                            { (index > 0 || index < currentContextBlocks.length - 1) && \r\n                                <>\r\n                                    { index > 0 ? \r\n                                    <button name='move section up' title='Section up' className={`${style['icon-item']} ${style['icon-chevron']}`} \r\n                                        onClick={() => handleReorder('UP')}>\r\n                                        <FontAwesomeIcon icon={faChevronUp} color={iconThemeColor} size='lg' />\r\n                                    </button> :\r\n                                    <button name='move section up' className={`${style['icon-item']} ${style['icon-chevron']} disabled`} disabled>\r\n                                        <FontAwesomeIcon icon={faChevronUp} color={iconThemeColor} size='lg' />\r\n                                    </button> }\r\n                                { index < currentContextBlocks.length - 1 ?\r\n                                    <button name='move section down' title='Section down' className={`${style['icon-item']} ${style['icon-chevron']}`} \r\n                                        onClick={() => handleReorder('DOWN')}>\r\n                                        <FontAwesomeIcon icon={faChevronDown} color={iconThemeColor} size='lg' />\r\n                                    </button> :\r\n                                    <button name='move section down' className={`${style['icon-item']} ${style['icon-chevron']} disabled`} disabled>\r\n                                        <FontAwesomeIcon icon={faChevronDown} color={iconThemeColor} size='lg' />\r\n                                    </button> }\r\n                                </> }\r\n                            <button name='edit section name' title='Edit section name' className={style['icon-item']} \r\n                                onClick={handleEdit}>\r\n                                <FontAwesomeIcon icon={faEdit} color={iconThemeColor} size='lg' />\r\n                            </button>\r\n                            { isLast &&\r\n                                <button name='new section' title='New section' className={style['icon-item']} \r\n                                    onClick={handleAddBlock}>\r\n                                    <FontAwesomeIcon icon={faPlus} color={iconThemeColor} size='lg' />\r\n                                </button> }\r\n                        </> }\r\n                </span> }\r\n            { subBlocks\r\n                .filter(sub => sub.block === block.id)\r\n                .map((sub, i) => <SubBlock \r\n                    key={sub.id} \r\n                    subBlock={sub}\r\n                    isLast={i === block.subBlockCount - 1} />) }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Block\r\n","import React, { useEffect } from 'react'\r\nimport { useCustomSelector } from '../../../store'\r\nimport Block from './Block'\r\n\r\nconst Blocks = () => {\r\n    const { mode, blocks, contexts } = useCustomSelector(state => state)\r\n    const currentContext = contexts.find(c => c.id === mode.currentContext)\r\n\r\n    useEffect(() => {\r\n        if (currentContext) {\r\n            document.title = `Organize - ${currentContext.name}`\r\n        } else {\r\n            document.title = 'Organize'\r\n        }\r\n    }, [currentContext])\r\n\r\n    return (\r\n        <>\r\n            { blocks\r\n                .filter(block => block.context === mode.currentContext)\r\n                .map((block, i) => {\r\n                    return <Block \r\n                        key={block.id} \r\n                        block={block}\r\n                        isLast={currentContext === undefined || i === currentContext.blockCount - 1} />\r\n                }) }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Blocks\r\n","import React, { useEffect } from 'react'\r\nimport { useCustomSelector } from '../../../store'\r\n\r\nconst About = () => {\r\n    const mode = useCustomSelector(state => state.mode)\r\n    const darkMode = mode.currentTheme === 1\r\n\r\n    useEffect(() => {\r\n        document.title = 'Organize - About Page'\r\n    }, [])\r\n\r\n    return (\r\n        <section>\r\n            <h1>About</h1>\r\n            <p>\r\n                This web application can be used to organize just about anything. <br />\r\n                You can keep notes, to-do items, goals, grocery lists, links, and any other musings\r\n                you might have.\r\n            </p>\r\n            <p>\r\n                You can also create contexts (separate pages which are listed in the menu for easy access).\r\n                Within those, you can create new sections and add items containing further writing\r\n                and/or links. What you do with this space is up to you. Enjoy!\r\n            </p>\r\n            <p>\r\n                Find the app on {' '}\r\n                <a \r\n                    href='https://github.com/wqgc/organize-app' \r\n                    target='_blank' \r\n                    rel='noreferrer noopener'\r\n                    className={darkMode ? 'a-dark' : ''}>\r\n                    GitHub.\r\n                </a>\r\n            </p>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { Dispatch } from 'react'\r\nimport Modal from 'react-modal'\r\nimport { useCustomSelector } from '../../store'\r\n\r\ninterface Props {\r\n    type: string | 'MIN_CONTEXT_NAME_LENGTH' | 'MAX_CONTEXT_NAME_LENGTH'\r\n    modalIsOpen: boolean\r\n    setModalIsOpen: Dispatch<boolean>\r\n}\r\n\r\nconst AlertModal = ({type, modalIsOpen, setModalIsOpen}: Props) => {\r\n    const mode = useCustomSelector(state => state.mode)\r\n    const darkMode = mode.currentTheme === 1\r\n\r\n    let message = ''\r\n\r\n    switch (type) {\r\n        case 'MIN_CONTEXT_NAME_LENGTH':\r\n            message = 'Context names must contain at least 1 character.'\r\n            break\r\n        case 'MAX_CONTEXT_NAME_LENGTH':\r\n            message = 'Context names must be no longer than 28 characters.'\r\n            break\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalIsOpen}\r\n            className={`modal ${darkMode && 'modal-dark'} modal-smaller`}\r\n            overlayClassName={darkMode ? 'modal-overlay-dark' : ''}\r\n            ariaHideApp={false} >\r\n            <div>\r\n                {message}\r\n            </div>\r\n            <div className='modal-buttons modal-buttons-center'>\r\n                <button \r\n                    name='ok'\r\n                    title='Ok'\r\n                    className={`choice-button button-neutral bolder ${darkMode && 'button-neutral-dark bolder-dark'}`} \r\n                    onClick={() => setModalIsOpen(false)}>\r\n                    Okay\r\n                </button>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AlertModal\r\n","import React, { useState, useRef, useLayoutEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport style from './ManageContexts.module.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit, faTrash, faCheck, faTimes, faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { Context, updateContext, setContexts } from '../../../reducers/contextsReducer'\r\nimport { useCustomSelector } from '../../../store'\r\nimport AlertModal from '../AlertModal'\r\nimport { swapContexts } from '../../../utils'\r\n\r\ninterface Props {\r\n    context: Context\r\n    index: number\r\n    darkMode: boolean\r\n    iconThemeColor: string\r\n    handleOpenDeletionModal: (context: Context) => void\r\n}\r\n\r\nconst ContextItem = ({ context, index, darkMode, iconThemeColor, handleOpenDeletionModal }: Props) => {\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [contextErrorType, setContextErrorType] = useState('')\r\n    const [contextNameValue, setContextNameValue] = useState('')\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const contextNameInput = useRef<HTMLInputElement>(null)\r\n\r\n    const contexts = useCustomSelector(state => state.contexts)\r\n    const dispatch = useDispatch()\r\n\r\n    useLayoutEffect(() => {\r\n        if (contextNameInput.current !== null && isEditing) {\r\n            contextNameInput.current.focus()\r\n        }\r\n    }, [isEditing])\r\n\r\n    const handleEdit = (): void => {\r\n        setIsEditing(true)\r\n        setContextNameValue(context.name)\r\n    }\r\n\r\n    const handleSubmit = (): void => {\r\n        let error = ''\r\n\r\n        if (contextNameValue.length < 1) {\r\n            error = 'MIN_CONTEXT_NAME_LENGTH'\r\n        } else if (contextNameValue.length > 28) {\r\n            error = 'MAX_CONTEXT_NAME_LENGTH'\r\n        }\r\n\r\n        if (error) {\r\n            setContextErrorType(error)\r\n            setModalIsOpen(true)\r\n        } else {\r\n            setIsEditing(false)\r\n            dispatch(updateContext({ ...context, name: contextNameValue }))\r\n        }\r\n    }\r\n\r\n    const handleReorder = (dir: 'UP' | 'DOWN'): void => {\r\n        const newContexts = swapContexts(contexts, index, dir)\r\n        dispatch(setContexts(newContexts))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AlertModal\r\n                type={contextErrorType}\r\n                modalIsOpen={modalIsOpen}\r\n                setModalIsOpen={setModalIsOpen} />\r\n            <div className={`${style.row} ${darkMode && style['row-dark']}`}>\r\n                { isEditing ?\r\n                    <input\r\n                        className={`${style['edit-mode']} ${darkMode && style['edit-mode-dark']} ${darkMode ? 'input-dark' : ''}`}\r\n                        name='context name'\r\n                        title='Context Name'\r\n                        ref={contextNameInput}\r\n                        value={contextNameValue}\r\n                        onChange={({target}) => setContextNameValue(target.value)}\r\n                        placeholder='Context Name'\r\n                        maxLength={28} />\r\n                    : <span className={style['context-name']}>{context.name}</span> }\r\n                <span className={style['button-group']}>\r\n                    { isEditing ?\r\n                        <>\r\n                            <button name='save changes' title='Save changes' className={style['icon-item']} onClick={handleSubmit}>\r\n                                <FontAwesomeIcon icon={faCheck} color={iconThemeColor} size='lg' />\r\n                            </button>\r\n                            <button name='cancel' title='Cancel' className={style['icon-item']} onClick={() => setIsEditing(false)}>\r\n                                <FontAwesomeIcon icon={faTimes} color={iconThemeColor} size='lg' />\r\n                            </button>\r\n                        </>\r\n                        :<>\r\n                            { (index > 0 || index < contexts.length - 1) && \r\n                                <>\r\n                                    { index > 0 ? \r\n                                        <button name='move context up' title='Context up' onClick={() => handleReorder('UP')}>\r\n                                            <FontAwesomeIcon icon={faChevronUp} color={iconThemeColor} size='lg' />\r\n                                        </button> : \r\n                                        <button name='move context up' className='disabled' disabled>\r\n                                            <FontAwesomeIcon icon={faChevronUp} color={iconThemeColor} size='lg' />\r\n                                        </button> }\r\n                                    { index < contexts.length - 1 ?\r\n                                        <button name='move context down' title='Context down' onClick={() => handleReorder('DOWN')}>\r\n                                            <FontAwesomeIcon icon={faChevronDown} color={iconThemeColor} size='lg' />\r\n                                        </button> : \r\n                                        <button name='move context down' className='disabled' disabled>\r\n                                            <FontAwesomeIcon icon={faChevronDown} color={iconThemeColor} size='lg' />\r\n                                        </button> }\r\n                                </> }\r\n                            <button name='edit context item' title='Edit context item' onClick={handleEdit}>\r\n                                <FontAwesomeIcon icon={faEdit} color={iconThemeColor} size='lg' />\r\n                            </button>\r\n                            { contexts.length > 1 &&\r\n                            <button name='delete context item' title='Delete context item' onClick={() => handleOpenDeletionModal(context)}>\r\n                                <FontAwesomeIcon icon={faTrash} color={iconThemeColor} size='lg' />\r\n                            </button> }\r\n                        </> }\r\n                </span>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContextItem\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport iconColors from '../../../iconColors'\r\nimport style from './ManageContexts.module.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { Context, addContext, deleteContext } from '../../../reducers/contextsReducer'\r\nimport { deleteBlock } from '../../../reducers/blocksReducer'\r\nimport { deleteSubBlock } from '../../../reducers/subBlocksReducer'\r\nimport { addBlock } from '../../../reducers/blocksReducer'\r\nimport { addSubBlock } from '../../../reducers/subBlocksReducer'\r\nimport { updateMode } from '../../../reducers/modeReducer'\r\nimport DeletionModal from '../DeletionModal'\r\nimport ContextItem from './ContextItem'\r\nimport { useCustomSelector } from '../../../store'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nconst ManageContexts = () => {\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const [focusedContext, setFocusedContext] = useState<Context | null>(null)\r\n    const dispatch = useDispatch()\r\n    const { mode, contexts, blocks, subBlocks } = useCustomSelector(state => state)\r\n\r\n    useEffect(() => {\r\n        document.title = 'Organize - Manage Contexts'\r\n    }, [])\r\n\r\n    const handleAddContext = (): void => {\r\n        const newContextId = uuidv4()\r\n        const newBlockId = uuidv4()\r\n\r\n        dispatch(addContext({\r\n            id: newContextId,\r\n            name: 'New Context',\r\n            blockCount: 1,\r\n            subBlockCount: 1\r\n        }))\r\n        dispatch(addBlock({\r\n            id: newBlockId,\r\n            name: 'New Section',\r\n            context: newContextId,\r\n            subBlockCount: 1\r\n        }))\r\n        dispatch(addSubBlock({\r\n            id: uuidv4(),\r\n            name: 'New Item',\r\n            block: newBlockId,\r\n            contents: '',\r\n            isStriked: false\r\n        }))\r\n    }\r\n\r\n    const handleDeleteContext = (id: string | null): void => {\r\n        // Clear blocks and sub blocks from state before deleting context\r\n        if (id) {\r\n            blocks.forEach(b => {\r\n                if (b.context === id) {\r\n                    subBlocks.forEach(sb => {\r\n                        if (sb.block === b.id) {\r\n                            dispatch(deleteSubBlock({ id: sb.id }))\r\n                        }\r\n                    })\r\n                    dispatch(deleteBlock({ id: b.id}))\r\n                }\r\n            })\r\n            // Check if we're deleting our current context, update context if so\r\n            if (mode.currentContext === id) {\r\n                const newCurrentContext = contexts.find(c => c.id !== id)\r\n                if (newCurrentContext) {\r\n                    dispatch(updateMode({ ...mode, currentContext: newCurrentContext.id as string }))\r\n                }\r\n            }\r\n            dispatch(deleteContext({ id }))\r\n        }\r\n        setModalIsOpen(false)\r\n    }\r\n\r\n    const handleOpenDeletionModal = (context: Context): void => {\r\n        // Set the focused context so the modal knows which to delete\r\n        setFocusedContext(context)\r\n        setModalIsOpen(true)\r\n    }\r\n\r\n    const darkMode = mode.currentTheme === 1\r\n    const iconThemeColor = darkMode ? iconColors.blue['200'] : iconColors.blue['100']\r\n\r\n    return (\r\n        <section>\r\n            { focusedContext && \r\n                <DeletionModal\r\n                    type='CONTEXT'\r\n                    modalIsOpen={modalIsOpen}\r\n                    setModalIsOpen={setModalIsOpen}\r\n                    handleDelete={() => handleDeleteContext(focusedContext.id)}\r\n                    name={focusedContext.name} /> }\r\n            <h1>Manage Contexts</h1>\r\n            <div id={style.container} className={ darkMode ?  style['container-dark'] : style.container }>\r\n                { contexts.map((c, i) => (\r\n                    <ContextItem \r\n                        key={i} \r\n                        context={c}\r\n                        index={i}\r\n                        darkMode={darkMode} \r\n                        iconThemeColor={iconThemeColor}\r\n                        handleOpenDeletionModal={handleOpenDeletionModal} />)) }\r\n            </div>\r\n            <button onClick={handleAddContext} className={style['new-context']}>\r\n                <FontAwesomeIcon icon={faPlus} color={iconThemeColor} />\r\n                {' '} New Context\r\n            </button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ManageContexts\r\n","import React, { useLayoutEffect, useEffect, useState, useCallback, useRef } from 'react'\r\nimport { useCustomSelector } from '../../../store'\r\nimport TextareaAutosize from 'react-textarea-autosize'\r\nimport style from '../MainContent.module.css'\r\nimport { saveAs } from 'file-saver'\r\nimport { validateAndSetState } from '../../../utils'\r\n\r\n\r\nconst ImportExport = () => {\r\n    const [textareaValue, setTextareaValue] = useState('')\r\n    const [saveButtonDisabled, setSaveButtonDisabled] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [updateMessage, setUpdateMessage] = useState('')\r\n    const state = useCustomSelector(state => state)\r\n    const saveButton = useRef<HTMLButtonElement>(null)\r\n\r\n    const darkMode = state.mode.currentTheme === 1\r\n    const importElement: any = document.getElementById('fileInput')\r\n\r\n    useEffect(() => {\r\n        document.title = 'Organize - Import / Export Data'\r\n    }, [])\r\n\r\n    // Enable save button only when changes from state have been made\r\n    useEffect(() => {\r\n        if (textareaValue !== JSON.stringify(state, null, 4)) {\r\n            setSaveButtonDisabled(false)\r\n            if (saveButton.current !== null) {\r\n                saveButton.current.disabled = false\r\n            }\r\n        } else {\r\n            setSaveButtonDisabled(true)\r\n            if (saveButton.current !== null) {\r\n                saveButton.current.disabled = true\r\n            }\r\n        }\r\n    }, [textareaValue, state])\r\n\r\n    // Give the text area our state\r\n    useLayoutEffect(() => {\r\n        setTextareaValue(JSON.stringify(state, null, 4))\r\n    }, [state, setTextareaValue])\r\n\r\n    const handleFiles = useCallback(() => {\r\n        const reader = new FileReader()\r\n        reader.readAsText(importElement.files[0])\r\n\r\n        reader.onload = () => {\r\n            if (typeof reader.result === 'string') {\r\n                setTextareaValue(reader.result)\r\n            }\r\n        }\r\n    }, [importElement])\r\n\r\n    // Check to see if a file was imported\r\n    useEffect(() => {\r\n        if (importElement !== null) {\r\n            importElement.addEventListener('change', handleFiles)\r\n\r\n            return () => importElement.removeEventListener('change', handleFiles)\r\n        }\r\n    }, [importElement, handleFiles])\r\n\r\n    const handleExport = (): void => {\r\n        const currentDate = new Date()\r\n        const day = currentDate.getDate()\r\n        const month = currentDate.getMonth() + 1\r\n        const year = currentDate.getFullYear()\r\n        const dateString = `${month}-${day}-${year}`\r\n\r\n        let blob = new Blob([textareaValue], {\r\n            type: 'text/plain;charset=utf-8'\r\n        })\r\n        saveAs(blob, `organize_data_${dateString}.json`)\r\n    }\r\n\r\n    const handleImport = (): void => {\r\n        if (importElement) {\r\n            importElement.click()\r\n        }\r\n    }\r\n\r\n    const handleTextareaChange = (event: any): void => {\r\n        setTextareaValue(event.target.value)\r\n        if (importElement) {\r\n            importElement.value = ''\r\n        }\r\n        setUpdateMessage('')\r\n    }\r\n\r\n    const handleSaveChanges = (): void => {\r\n        try {\r\n            validateAndSetState(JSON.parse(textareaValue), true)\r\n        } catch (error) {\r\n            let errorMessage = 'Error: '\r\n            const errorTail = ' If you aren\\'t sure how to fix this, refresh the page to discard changes.'\r\n\r\n            if (error instanceof SyntaxError) {\r\n                errorMessage += 'The data you\\'re trying to save isn\\'t formatted correctly.'\r\n            } else {\r\n                errorMessage += `${error.message}.`\r\n            }\r\n            setErrorMessage(errorMessage + errorTail)\r\n            return\r\n        }\r\n        setErrorMessage('')\r\n        setUpdateMessage('Changes successfully saved!')\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h1>Import / Export Data</h1>\r\n            { (errorMessage && \r\n                <p className={`message error-message ${darkMode && 'error-message-dark'}`}>\r\n                    {errorMessage}\r\n                </p>) || (updateMessage &&\r\n                <p className={`message update-message ${darkMode && 'update-message-dark'}`}>\r\n                    {updateMessage}\r\n                </p>) }\r\n            <TextareaAutosize \r\n                        className={`${style['edit-mode']} ${darkMode ? `input-dark ${style['edit-mode-dark']}` : ''}`}\r\n                        name='data'\r\n                        title='Data'\r\n                        value={textareaValue}\r\n                        onChange={handleTextareaChange}\r\n                        placeholder='Data' />\r\n            <div id={style['importexport-container']} className={darkMode ? style['bg-dark'] : style['bg-light']}>\r\n                <button\r\n                    name='import'\r\n                    title='Import'\r\n                    className={`choice-button button-neutral bolder ${darkMode && 'button-neutral-dark bolder-dark'}`}\r\n                    onClick={handleImport}>\r\n                    Import\r\n                </button>\r\n                <button \r\n                    name='export'\r\n                    title='Export'\r\n                    className={`choice-button button-neutral bolder ${darkMode && 'button-neutral-dark bolder-dark'}`}\r\n                    onClick={handleExport}>\r\n                    Export\r\n                </button>\r\n                <button \r\n                    name='save changes'\r\n                    title='Save Changes'\r\n                    className={\r\n                        `choice-button button-neutral bolder ${darkMode && 'button-neutral-dark bolder-dark'} ${saveButtonDisabled && 'disabled'}`\r\n                    }\r\n                    ref={saveButton}\r\n                    onClick={handleSaveChanges}>\r\n                    Save Changes\r\n                </button>\r\n            </div>\r\n            <input \r\n                id='fileInput'\r\n                type='file' \r\n                name='import' \r\n                accept='.json' \r\n                style={{ display: 'none' }}\r\n                aria-hidden='true' />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ImportExport \r\n","import React from 'react'\r\nimport { useCustomSelector } from '../../store'\r\nimport style from './MainContent.module.css'\r\nimport Blocks from './Blocks/Blocks'\r\nimport About from './About/About'\r\nimport ManageContexts from './ManageContexts/ManageContexts'\r\nimport ImportExport from './ImportExport/ImportExport'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport { BASEPATH } from '../../constants'\r\n\r\nconst MainContent = () => {\r\n    const { mode } = useCustomSelector(state => state)\r\n    const darkMode = mode.currentTheme === 1\r\n\r\n    return (\r\n        <>\r\n            <div className={`${style.separator} ${ darkMode && style['bg-dark']}`} /> <br />\r\n            <main id={style.container} className={darkMode ? 'container-dark' : ''}>\r\n                <Switch>\r\n                    <Route exact path={`${BASEPATH}/`}>\r\n                        <Blocks />\r\n                    </Route>\r\n                    <Route path={`${BASEPATH}/about`}>\r\n                        <About />\r\n                    </Route>\r\n                    <Route path ={`${BASEPATH}/importexport`}>\r\n                        <ImportExport />\r\n                    </Route>\r\n                    <Route path={`${BASEPATH}/managecontexts`}>\r\n                        <ManageContexts />\r\n                    </Route>\r\n                </Switch>\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainContent\r\n","import React, { useLayoutEffect, useEffect, useState, useCallback } from 'react'\nimport './App.css'\nimport { useCustomSelector } from './store'\nimport TopBar from './components/TopBar/TopBar'\nimport Menu from './components/Menu/Menu'\nimport MainContent from './components/MainContent/MainContent'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { validateAndSetState } from './utils'\n\nconst App = () => {\n    const [usingDropdown, setUsingDropdown] = useState(false)\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth)\n    const { mode, contexts, blocks, subBlocks } = useCustomSelector(state => state)\n\n    // Modify body colors according to our theme\n    // Other theme changes are done through the addition of classes within components\n    useLayoutEffect(() => {\n        switch(mode.currentTheme) {\n            case 1: // Dark\n                document.body.style.color = 'white'\n                document.body.style.backgroundColor = '#2d3341'\n                break\n            default: // Light\n                document.body.style.color = '#0E0E2C'\n                document.body.style.backgroundColor = 'white'\n        }\n    }, [mode])\n\n    // Set initial redux state from local storage if it exists\n    useEffect(() => {\n        const modeData = window.localStorage.getItem('mode')\n        const contextsData = window.localStorage.getItem('contexts')\n        const blocksData = window.localStorage.getItem('blocks')\n        const subBlocksData = window.localStorage.getItem('subBlocks')\n\n        if (modeData && contextsData && blocksData && subBlocksData) {\n            const newState = {\n                mode: JSON.parse(modeData),\n                contexts: JSON.parse(contextsData),\n                blocks: JSON.parse(blocksData),\n                subBlocks: JSON.parse(subBlocksData)\n            }\n\n            try {\n                validateAndSetState(newState, false)\n            } catch (error) {\n                console.log(error.message)\n            }\n        }\n    }, [])\n\n    // When redux state updates, update the relevant local storage variable\n    useEffect(() => { window.localStorage.setItem('mode', JSON.stringify(mode)) }, [mode])\n    useEffect(() => { window.localStorage.setItem('contexts', JSON.stringify(contexts)) }, [contexts])\n    useEffect(() => { window.localStorage.setItem('blocks', JSON.stringify(blocks)) }, [blocks])\n    useEffect(() => { window.localStorage.setItem('subBlocks', JSON.stringify(subBlocks)) }, [subBlocks])\n\n    // Deal with window resizing to change layout\n    const handleResize = useCallback((): void => {\n        setWindowWidth(window.innerWidth)\n    }, [])\n\n    useLayoutEffect(() => {\n        if (windowWidth >= 900) {\n            setUsingDropdown(false)\n        } else {\n            setUsingDropdown(true)\n        }\n    }, [windowWidth])\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize)\n        return () => window.removeEventListener('resize', handleResize)\n    }, [handleResize])\n\n    return (\n        <Router>\n            <div>\n                <TopBar usingDropdown={usingDropdown} />\n                <div className={`nav-curv ${mode.currentTheme === 1 && 'nav-curv-dark'}`} />\n                <div id={usingDropdown ? '' : 'no-dropdown_container'}>\n                    <Menu isDropdown={false} usingDropdown={usingDropdown} />\n                    <MainContent />\n                </div>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}